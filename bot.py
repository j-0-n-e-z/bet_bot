import os
from uuid import uuid4

from dotenv import load_dotenv
from telegram import InlineQueryResultArticle, InputTextMessageContent, Update
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes,
                          InlineQueryHandler, MessageHandler, filters)

load_dotenv()

def generateBets(freebet_coef, money_coef, freebet, money_start = 100, money_step = 10, inaccuracy = 0.02):
    lowest_win = freebet / 2

    if freebet < 80:
      return '—Ç–∞–∫–∏—Ö —Ñ—Ä–∏–±–µ—Ç–æ–≤ –Ω–µ –±—ã–≤–∞–µ—Ç'

    bets = []
    for i in range(1000):
        bet = money_start + money_step * i
        freebet_win = round((freebet_coef - 1) * freebet - bet)
        money_win = round(bet * (money_coef - 1))
        
        bets.append({
            "bet": bet,
            "money_win": money_win,
            "freebet_win": freebet_win
        })

    profitable_bets = [
        bet for bet in bets
        if bet["money_win"] >= lowest_win * (1 - inaccuracy) and
          bet["freebet_win"] >= lowest_win * (1 - inaccuracy)
    ]

    if not profitable_bets:
        return "–∫—ç—Ñ—ã –≥–æ–≤–Ω–æ"
    
    def sort_key(bet):
      diff = bet["money_win"] + bet["freebet_win"] - 2 * lowest_win
      return (-diff, bet["bet"])

    profitable_bets_sorted = sorted(profitable_bets, key=sort_key)
    
    print(*profitable_bets_sorted, sep='\n')
    
    return profitable_bets_sorted


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_html(update.message.text_html)


async def calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    print(args)

    if (len(args) != 3): 
      await context.bot.send_message(chat_id=update.effective_chat.id, text='–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: [—Ñ—Ä–∏–±–µ—Ç_–∫—ç—Ñ] [—Ä—É–±_–∫—ç—Ñ] [—Ñ—Ä–∏–±–µ—Ç]')
      return

    bets = []
    try:
      bets = generateBets(*list(map(float, args)))
    except:
      await context.bot.send_message(chat_id=update.effective_chat.id, text='–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
      return
    
    if isinstance(bets, str):
      await context.bot.send_message(chat_id=update.effective_chat.id, text=bets)
      return

    message = "–°–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫:\n\n"
    print(bets)
    for item in bets:
        message += (
            f"üí∞ –°—Ç–∞–≤–∫–∞: {item['bet']}—Ä\n"
            f"üéØ –í—ã–∏–≥—Ä—ã—à {args[0]} = {item['money_win']}—Ä\n"
            f"üéÅ –í—ã–∏–≥—Ä—ã—à {args[1]} = {item['freebet_win']}—Ä\n\n"
        )

    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)

def main() -> None:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if  TELEGRAM_BOT_TOKEN is None:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    
    caps_handler = CommandHandler('calc', calc)
    application.add_handler(caps_handler)

    application.run_polling()

if __name__ == '__main__':
    main()
